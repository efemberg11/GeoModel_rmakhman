# List of the CI build stages.
stages:
  - step-pre
  - step-A
  - step-B
  - step-C
  - step-D
  - step-E
  - step-F

# List global variables
variables:
  CMAKE_DEPS_BASE_ARGS: -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=../install
  CMAKE_BASE_ARGS: -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=../install
  # also, 'CMAKE_EXTRA_FLAGS' will be specified by specific jobs when needed, and used by job templates like 'geomodel-job'
  GIT_SUBMODULE_STRATEGY: recursive


# TEMPLATES FOR BUILDING ON DIFFERENT PLATFORMS

# general macOS job template
.macos-template-job: &macos-job
  tags:
    - macos
  rules:
    - if: '$CI_PROJECT_ROOT_NAMESPACE == "GeoModelDev"'
  allow_failure: true
  timeout: 30 minutes
  before_script:
    - brew tap davidchall/hep
    - brew bundle --file=CI/Brewfile # install third-party dependencies, if needed
    - export PATH="/usr/local/opt/expat/bin:$PATH" # to make CMake use expat from Homebrew instead of the old one shipped with the system in /usr/lib
    - export LDFLAGS="-L/usr/local/opt/expat/lib"
    - export CPPFLAGS="-I/usr/local/opt/expat/include"
    - export PATH="/usr/local/opt/qt5/bin:$PATH" # to make Qt5 discoverable by CMake


# general Ubuntu job template
.ubuntu-template-job-base: &ubuntu-job-base
  image: ubuntu:22.04
  tags:
    - docker
  rules:
    - when: always


# NOTE
# The Ubuntu package 'nlohmann-json-dev' is version 2.x, too old for us.
# Thus, for GeoModelVisualization (GMEX), we now build nlohmann_json as part
# of the build, by using the 'standalone' job only
.ubuntu-template-job-default: &ubuntu-job
  <<: *ubuntu-job-base
  before_script:
    - apt-get update -qq && apt-get install -y -qq git wget unzip build-essential freeglut3-dev libboost-all-dev qtbase5-dev libqt5opengl5-dev mercurial libeigen3-dev libsqlite3-dev nlohmann-json3-dev libexpat1-dev libxerces-c-dev libhdf5-dev libhepmc3-dev cmake


# .ubuntu-template-job-registry: &ubuntu-job-registry
#   image: gitlab-registry.cern.ch/mbandier/geant4-ubuntu/base-image:1.1
#   tags:
#     - docker
#   before_script:
#     - apt-get update -qq && apt-get install -y -qq libeigen3-dev libsqlite3-dev


# TEMPLATES FOR BUILDING PACKAGES

.coin-build-template: &coin-job
  variables:
    CMAKE_ARGS: ${CMAKE_DEPS_BASE_ARGS}
  script:
    - pwd; ls
    - wget https://atlas-vp1.web.cern.ch/atlas-vp1/sources/coin-4.0.0-src.zip
    - unzip coin-4.0.0-src.zip -d coin-sources
    - mv coin-sources/* coin
    - mkdir build_coin
    - cd build_coin
    - cmake ${CMAKE_ARGS} ../coin
    - make -j2
    - make install
  artifacts:
    paths:
      - install

.soqt-build-template: &soqt-job
  variables:
    CMAKE_ARGS: ${CMAKE_DEPS_BASE_ARGS}
  script:
    - pwd; ls
    - wget https://atlas-vp1.web.cern.ch/atlas-vp1/sources/soqt.zip
    - unzip soqt.zip
    - mkdir build_soqt
    - cd build_soqt
    - echo "CMAKE_ARGS - ${CMAKE_ARGS}"
    - cmake ${CMAKE_ARGS} ../soqt
    - make -j2
    - make install
    - pwd; ls # CI debug only
    - ls ../ # CI debug only
    - ls ../../ # CI debug only
  artifacts:
    paths:
      - install




.geant4-build-template-job: &geant4-job
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
  script:
    - pwd; ls
    - git clone https://gitlab.cern.ch/geant4/geant4.git
    - cd geant4
    - git checkout tags/v11.0.2
    - cd ../
    - mkdir Geant4-build
    - cd Geant4-build
    - ls;
    - ls ../
    - if [ -d "../install" ]; then ls ../install; fi
    - cmake ${CMAKE_ARGS} -DGEANT4_INSTALL_DATA=ON -DGEANT4_USE_GDML=ON -DGEANT4_BUILD_MULTITHREADED=ON  ../geant4 
    - make -j4
    - make install
  artifacts:
    paths:
      - install




.geomodel-build-template: &geomodel-job
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
  script:
    - echo "PWD; LS" # CI debug only
    - pwd; ls # CI debug only
    - ls ../ # CI debug only
    - ls ../../ # CI debug only
    - cmake --version # CI debug only
    - mkdir build
    - cd build
    - echo "CMAKE_ARGS -- ${CMAKE_ARGS}"
    - echo "CMAKE_CONFIG_FLAGS -- ${CMAKE_CONFIG_FLAGS}"
    - echo "CMAKE_EXTRA_FLAGS -- ${CMAKE_EXTRA_FLAGS}"
    - cmake ${CMAKE_ARGS} ${CMAKE_CONFIG_FLAGS} ${CMAKE_EXTRA_FLAGS} .. # the CMAKE_EXTRA_FLAGS are set by specific jobs when needed
    - cmake --build . -- -j2
    - cmake --build . -- install
    - pwd; ls # CI debug only
    - ls ../ # CI debug only
    - ls ../../ # CI debug only
  artifacts:
    paths:
      - install



# ACTUAL BUILD JOBS

## a debug job
debug-job:
  stage: step-A
  script:
    - echo "CI_REPOSITORY_URL -- $CI_REPOSITORY_URL"
    - echo "GITLAB_USER_NAME -- $GITLAB_USER_NAME"
    - echo "GITLAB_USER_LOGIN -- $GITLAB_USER_LOGIN"
    - echo "CI_PROJECT_URL -- $CI_PROJECT_URL"
    - echo "CI_PROJECT_NAMESPACE -- $CI_PROJECT_NAMESPACE"
    - echo "CI_PROJECT_ROOT_NAMESPACE -- $CI_PROJECT_ROOT_NAMESPACE"
    - echo "CI_PROJECT_PATH -- $CI_PROJECT_PATH"
  when: manual


### MACOS BUILD JOBS

# *** NOTE ***
# gitlab-runner on needs to be run in user's space "shell executor" on macOS,
# thus, it's not possibke to containerize the jobs.
# Also, `brew` cannot be run in parallel jobs, as it throw error, making the job fail.
# Thus, for our macOS pipeline, we use 'brew bundle' to check and install all needed
# dependencies, which are listed in a custom Brewfile under the CI folder.

mac-coin:
  <<: *macos-job
  <<: *coin-job
  stage: step-A


mac-soqt:
  <<: *macos-job
  <<: *soqt-job
  stage: step-B
  needs: ["mac-coin"]



mac-gm:
  <<: *macos-job
  <<: *geomodel-job
  stage: step-A


mac-gm-tools:
  <<: *macos-job
  <<: *geomodel-job
  stage: step-A
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_EXTRA_FLAGS: -DGEOMODEL_BUILD_TOOLS=TRUE


mac-gm-visualization:
  <<: *macos-job
  <<: *geomodel-job
  stage: step-C
  needs: ["mac-coin", "mac-soqt"]
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_EXTRA_FLAGS: -DGEOMODEL_BUILD_VISUALIZATION=TRUE


mac-gm-examples:
  <<: *macos-job
  <<: *geomodel-job
  stage: step-A
  # needs: ["mac-config"]
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_CONFIG_FLAGS: -DGEOMODEL_BUILD_EXAMPLES=TRUE

mac-gm-gmg4:
  <<: *macos-job
  <<: *geomodel-job
  stage: step-A
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_CONFIG_FLAGS: -DGEOMODEL_BUILD_GEOMODELG4=TRUE


mac-gm-examples-gmg4:
  <<: *macos-job
  <<: *geomodel-job
  stage: step-A
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_CONFIG_FLAGS: -DGEOMODEL_BUILD_EXAMPLES_W_GEANT4=TRUE


mac-gm-fullsimlight:
  <<: *macos-job
  <<: *geomodel-job
  stage: step-A
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_CONFIG_FLAGS: -DGEOMODEL_BUILD_FULLSIMLIGHT=TRUE


mac-gm-fsl:
  <<: *macos-job
  <<: *geomodel-job
  stage: step-A
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_EXTRA_FLAGS: -DGEOMODEL_BUILD_FSL=TRUE


mac-gm-all:
  <<: *macos-job
  <<: *geomodel-job
  stage: step-C
  needs: ["mac-coin", "mac-soqt"]
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_EXTRA_FLAGS: -DGEOMODEL_BUILD_ALL=TRUE


mac-gm-atlasextras:
  <<: *macos-job
  <<: *geomodel-job
  stage: step-A
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_CONFIG_FLAGS: -DGEOMODEL_BUILD_ATLASEXTENSIONS=TRUE


### UBUNTU ALL-IN-ONE BUILD JOBS

### These jobs build the various GeoModel sub-packages with the use of the CMake
### build options.

ubu-coin:
  <<: *ubuntu-job
  <<: *coin-job
  stage: step-A

ubu-soqt:
  <<: *ubuntu-job
  <<: *soqt-job
  stage: step-B
  needs: ["ubu-coin"]

ubu-gm-base:
  <<: *ubuntu-job
  <<: *geomodel-job
  stage: step-A
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}

ubu-gm-tools:
  <<: *ubuntu-job
  <<: *geomodel-job
  stage: step-A
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_CONFIG_FLAGS: -DGEOMODEL_BUILD_TOOLS=TRUE


ubu-gm-visualization:
  <<: *ubuntu-job
  <<: *geomodel-job
  needs: ["ubu-coin", "ubu-soqt"]
  stage: step-C
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_CONFIG_FLAGS: -DGEOMODEL_BUILD_VISUALIZATION=TRUE

ubu-gm-examples:
  <<: *ubuntu-job
  <<: *geomodel-job
  stage: step-A
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_CONFIG_FLAGS: -DGEOMODEL_BUILD_EXAMPLES=TRUE



ubu-geant4:
  <<: *ubuntu-job
  <<: *geant4-job
  stage: step-A


ubu-gm-examples-gmg4:
  <<: *ubuntu-job
  <<: *geomodel-job
  stage: step-B
  needs: ["ubu-geant4"]
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_CONFIG_FLAGS: -DGEOMODEL_BUILD_EXAMPLES_W_GEANT4=TRUE

ubu-gm-gmg4:
  <<: *ubuntu-job
  <<: *geomodel-job
  stage: step-B
  needs: ["ubu-geant4"]
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_CONFIG_FLAGS: -DGEOMODEL_BUILD_GEOMODELG4=TRUE


ubu-gm-fullsimlight:
  <<: *ubuntu-job
  <<: *geomodel-job
  stage: step-B
  needs: ["ubu-geant4"]
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_CONFIG_FLAGS: -DGEOMODEL_BUILD_FULLSIMLIGHT=TRUE


ubu-gm-fsl:
  <<: *ubuntu-job
  <<: *geomodel-job
  stage: step-B
  needs: ["ubu-geant4"]
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_CONFIG_FLAGS: -DGEOMODEL_BUILD_FSL=TRUE


ubu-gm-all:
  <<: *ubuntu-job
  <<: *geomodel-job
  stage: step-C
  needs: ["ubu-coin", "ubu-soqt", "ubu-geant4"]
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_CONFIG_FLAGS: -DGEOMODEL_BUILD_ALL=TRUE


ubu-gm-atlasextras:
  <<: *ubuntu-job
  <<: *geomodel-job
  stage: step-B
  needs: ["ubu-geant4"]
  variables:
    CMAKE_ARGS: ${CMAKE_BASE_ARGS}
    CMAKE_CONFIG_FLAGS: -DGEOMODEL_BUILD_ATLASEXTENSIONS=TRUE

#TODO: this does not work properly. Needs some work...
# ubu-gm-fullsimlight-customxercesc-builtinjson:
#   <<: *ubuntu-job
#   <<: *geomodel-job
#   stage: step-C
#   needs: ["ubu-geant4"]
#   variables:
#     XERCESC_VERSION: 3.2.3
#     CMAKE_ARGS: ${CMAKE_BASE_ARGS}
#     CMAKE_CONFIG_FLAGS: -DGEOMODEL_BUILD_FULLSIMLIGHT=TRUE
#     CMAKE_EXTRA_FLAGS: -DGEOMODEL_USE_BUILTIN_JSON=TRUE -DXercesC_INCLUDE_DIR=../install/xerces-c-${XERCESC_VERSION}/include -DXercesC_LIBRARY=../install/xerces-c-${XERCESC_VERSION}/lib/libxerces-c.dylib
#   rules:
#     - when: manual




### UBUNTU SINGLE BUILD JOBS

### These jobs build the various GeoModel sub-packages as single top-tree packages,
### one of top of the others. This is what is used, for example, when building 
### distribution kits, such as the Homebrew 'bottles' for macOS. 
### Therefore, these jobs test the succesfull build of the GeoModel side for the 
### distribution kits. If these jobs fail, the formula building the 
### distribution kits will fail as well.

ubu-single-gmbase:
  <<: *ubuntu-job
  stage: step-A
  variables:
      CMAKE_ARGS: ${CMAKE_BASE_ARGS}
  script:
    - mkdir build
    - cd build
    - cmake ${CMAKE_ARGS} .. # the CMAKE_EXTRA_FLAGS are set by specific jobs when needed
    - cmake --build . -- -j2
    - cmake --build . -- install
  artifacts:
    paths:
      - install

ubu-single-gmtools:
  <<: *ubuntu-job
  stage: step-B
  needs: ["ubu-single-gmbase"]
  variables:
      CMAKE_ARGS: ${CMAKE_BASE_ARGS}
  script:
    - mkdir build
    - cd build
    - cmake ${CMAKE_ARGS} ../GeoModelTools # the CMAKE_EXTRA_FLAGS are set by specific jobs when needed
    - cmake --build . -- -j2
    - cmake --build . -- install
  artifacts:
    paths:
      - install

ubu-single-gmviz:
  <<: *ubuntu-job
  stage: step-C
  needs: ["ubu-single-gmbase", "ubu-soqt"]
  variables:
      CMAKE_ARGS: ${CMAKE_BASE_ARGS}
  script:
    - mkdir build
    - cd build
    - cmake ${CMAKE_ARGS} ../GeoModelVisualization # the CMAKE_EXTRA_FLAGS are set by specific jobs when needed
    - cmake --build . -- -j2
    - cmake --build . -- install
  artifacts:
    paths:
      - install

ubu-single-gmg4:
  <<: *ubuntu-job
  stage: step-C
  needs: ["ubu-single-gmbase", "ubu-geant4"]
  variables:
      CMAKE_ARGS: ${CMAKE_BASE_ARGS}
  script:
    - mkdir build
    - cd build
    - cmake ${CMAKE_ARGS} ../GeoModelG4 # the CMAKE_EXTRA_FLAGS are set by specific jobs when needed
    - cmake --build . -- -j2
    - cmake --build . -- install
  artifacts:
    paths:
      - install

ubu-single-gmfullsimlight:
  <<: *ubuntu-job
  stage: step-D
  needs: ["ubu-single-gmg4", "ubu-geant4"]
  variables:
      CMAKE_ARGS: ${CMAKE_BASE_ARGS}
  script:
    - mkdir build
    - cd build
    - cmake ${CMAKE_ARGS} ../FullSimLight # the CMAKE_EXTRA_FLAGS are set by specific jobs when needed
    - cmake --build . -- -j2
    - cmake --build . -- install
  artifacts:
    paths:
      - install

ubu-single-gmfsl:
  <<: *ubuntu-job
  stage: step-E
  needs: ["ubu-single-gmfullsimlight"]
  variables:
      CMAKE_ARGS: ${CMAKE_BASE_ARGS}
  script:
    - mkdir build
    - cd build
    - cmake ${CMAKE_ARGS} ../FSL # the CMAKE_EXTRA_FLAGS are set by specific jobs when needed
    - cmake --build . -- -j2
    - cmake --build . -- install
  artifacts:
    paths:
      - install


#####################
### Documentation ###
#####################

docs-build:
    stage: step-A
    rules:
      - changes:
        - documentation/**/*
    allow_failure: true
    timeout: 30 minutes
    image: gitlab-registry.cern.ch/authoring/documentation/mkdocs:stable
    before_script:
        - apt-get update -qq && apt-get install -y -qq git wget unzip build-essential freeglut3-dev libboost-all-dev qt5-default mercurial libeigen3-dev libsqlite3-dev
        - pip install --upgrade pip
        - pip install -r documentation/requirements.txt
        #- pip install markdown
        #- pip install mkdocs-material
        #- pip install markdown-include
        #- pip install 'mkdocs-macros-plugin==0.5.0'
        - pip install mkdocs-mermaid2-plugin # adds support for mermaid diagrams / flowcharts
        ##- pip install mkdocs-git-revision-date-plugin # See: https://github.com/mkdocs/mkdocs/issues/1408#issuecomment-443592097
    script:
        #- git --version #TODO: update the docker image to have git
        - ls
        - cd documentation
        - ls
        - mkdocs build --clean --site-dir public
        - ls
        - cp .htaccess public/papers/internal/
        - ls
    artifacts:
        paths:
            - documentation/public
        expire_in: 1 hour

docs-deploy:
    stage: step-B
    needs: ["docs-build"]
    rules:
      - if: '$CI_COMMIT_BRANCH == "master"' # Deploy, only if changes are pushed to master.
        changes:
        - documentation/**/*
    variables:
      "EOS_PATH": "/eos/project/g/geomodel/www/home"
    image: gitlab-registry.cern.ch/ci-tools/ci-web-deployer:latest
    script:
        - ls
        - cd documentation
        - ls
        - deploy-eos



#####################
### Docker images ###
#####################

## Build a 'base' Docker image
## containing the GeoModel base packages
##  Note: we build the docker image only from 'master' and tags
build_system_docker:
  stage: step-A
  only:
    refs:
      - master
      - tags
  variables:
    TO: $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME}-base
    DOCKER_FILE: 'CI/DockerfileBase'
    # all submodules will be cloned recursively upon start of CI job
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_SSL_NO_VERIFY: "true"
  tags:
    - docker-image-build
  script:
    - ignore

##  Construct one Docker image containing
##  also Geant4
##  Note:
##  - we build the docker image only from 'master' and tags
##  - image's final name is, e.g., "geomodel:master-base"
##
build_full_docker:
  stage: step-B
  allow_failure: true
  only:
    refs:
      - master
      - tags
  variables:
    TO: $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME}-full
    DOCKER_FILE: 'CI/DockerfileFull'
    # all submodules will be cloned recursively upon start of CI job
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_SSL_NO_VERIFY: "true"
    BUILD_ARG: BASEIMAGE=$CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME}-base
  tags:
    - docker-image-build
  script:
    - ignore
  needs:
    - build_system_docker
  timeout: 2h 0m 

##  Construct one Docker image only for
##  viewer puposes
##  Note:
##  - we build the docker image only from 'master' and tags
##  - image's final name is, e.g., "geomodel:master-light"
##
build_light_docker:
  stage: step-B
  only:
    refs:
      - master
      - tags
  variables:
    TO: $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME}-light
    DOCKER_FILE: 'CI/DockerfileLight'
    # all submodules will be cloned recursively upon start of CI job
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_SSL_NO_VERIFY: "true"
    BUILD_ARG: BASEIMAGE=$CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME}-base
  tags:
    - docker-image-build
  script:
    - ignore
  needs:
    - build_system_docker

##########
## TAGS ##
##########
after-tag-creation:
  stage: step-A
  # only run on tags
  #only:
  #  - tags
  # manual mode, for testing the script
  when: manual
  script:
    - 'TAG=$(curl -Ss --request GET "https://gitlab.cern.ch/api/v4/projects/95156/repository/tags" | jq -r ".[0] | .name")'
    - 'echo "Latest TAG: ${TAG}"'
    - test -z "$TAG" && echo "no tag found" && exit 1
    - 'VERSION=$(sed -n -E "s#(^.*GeoModel_VERSION.*[\"])(.*)([\"].*)\$#\2#p" cmake/GeoModel-version.cmake)' # -E for extended regex on macOS, as -r on linux
    - 'echo "Latest GeoModel VERSION: ${VERSION}"'
    - test -z "$VERSION" && echo "no version found" && exit 1
    - 'echo "Latest TAG: ${TAG} -- Latest GeoModel VERSION: ${VERSION}"'
    - test "$TAG" != "$VERSION" && echo "ERROR --> There is a TAG/VERSION mismatch" && exit 1
    - echo "OK."

