//
//  GeoModel Action class to
//	write a GeoModel tree to a database
//
//	Riccardo Maria BIANCHI
//	University of Pittsburgh
//  <rbianchi-AT-cern.ch>
//
//	May 2016
//

#ifndef WriteGeoModelAction_h
#define WriteGeoModelAction_h 1

// C++
#include <unordered_map> // C++11
#include <iostream>

// GeoNodeAction
#include "GeoModelKernel/GeoGraphNode.h"
#include "GeoModelKernel/GeoNodeAction.h"
#include "GeoModelKernel/GeoTraversalState.h"

// Qt includes
#include <QtSql>


//typedef std::unordered_map<int,int> MemMap;
typedef std::unordered_map<std::string,int> MemMap;


// FWD declarations
//class QSqlError;
//class QSqlDatabase;
//class QString;
//class QVariant;
//class QSqlQuery;

//	This action prints the node tree.  It can be configured
//	to print a message on the following types of nodes:
//
//	* Transforms
//	* Physical Volumes and Full Physical Volumes.
//	* Transforms
//	* SerialDenominators
//	* SerialTransforms
//	* IdentifierTag
//
//	These must be switched on (using setNotificationState())

// SQLite
//#include "sqlite/sqlite3.h"
#include <sqlite3.h>

class WriteGeoModelAction : public GeoNodeAction  //## Inherits: <unnamed>%3FB0190202B6
{
	enum Type { TRANSFORM,
		VOLUME,
		NAMETAG,
		IDENTIFIERTAG};

public:

	//## Constructors (specified)
	//	Constructor for the print graph action.
	WriteGeoModelAction (std::ostream &o,	// Constructor.  Takes an output stream.
			MemMap& m, // and an unordered map.
			sqlite3 *db = 0//
	);
	//## Destructor (generated)
	virtual ~WriteGeoModelAction();

    bool isOpen() const;


	//## Other Operations (specified)

	//	Handles a Transform.
	virtual void handleTransform (const GeoTransform *xform);

	//	Handles a physical volume.
	virtual void handlePhysVol (const GeoPhysVol *vol);

	//	Handles a physical volume.
	virtual void handleFullPhysVol (const GeoFullPhysVol *vol);

	//	Handles a Name Tag.
	virtual void handleNameTag (const GeoNameTag *nameTag);

	//	Handles a Serial Denominator.
	virtual void handleSerialDenominator (const GeoSerialDenominator *sD);

	//	Handles a Serial Transformer
	virtual void handleSerialTransformer (const GeoSerialTransformer  *sT);

	//	Handles an Identifier Tag.
	virtual void handleIdentifierTag (const GeoIdentifierTag *idTag);

	//	Sets the notification state.  Default: everything on.
	void setNotification (Type type, bool state);

	// Public SQLite DB methods
	QSqlError fetchAllRecords();

	QSqlError initDB();
	QSqlError loadTestData();
protected:

private:
	//## Constructors (generated)
	WriteGeoModelAction(const WriteGeoModelAction &right);

	//## Assignment Operation (generated)
	WriteGeoModelAction & operator=(const WriteGeoModelAction &right);


	//	Indent the print.
	void indent ();


	int storeObj(const GeoLogVol* pointer);
	int storeObj(const GeoMaterial* pointer);
	int storeObj(const GeoGraphNode* pointer);
	int storeObj(const GeoShape* pointer);

	int storeAddress(const std::string address);
	void persistifyObj(const GeoPhysVol * pointer);

	// Private SQLite DB methods
//	static int callback(void *NotUsed, int argc, char **argv, char **azColName);
//	void createTables();
//	bool executeSQL(char const *sql);

//	QSqlError openDB();
//	void closeDB();


	QVariant addPhysVol(QSqlQuery &q, const QVariant &logVolId, const QVariant &parentPhysVolId);
	QVariant addLogVol(QSqlQuery &q, const QString &name, const QVariant &shapeId, const QVariant &materialId);
	QVariant addMaterial(QSqlQuery &q, const QString &name);
	QVariant addShape(QSqlQuery &q, const QString &name);



	// Data Members for Class Attributes

	//	A pointer to a name tag.  If the volume is named.
	const GeoNameTag *m_nameTag;

	//	A pointer to a serial denominator.  If one exists.
	const GeoSerialDenominator *m_serialDenominator;

	//	A pointer to an identifier tag.  If the volume is identified.
	const GeoIdentifierTag *m_idTag;

	//	List of Pending Transformations.
	std::vector<const GeoTransform *>  m_pendingTransformList;

	//	On/off flag for transforms.
	bool m_transformState;

	//	On/off flag for physical volumes.
	bool m_volumeState;

	//	On/off flag for name tags.
	bool m_nametagState;

	//	On/off flag for serial denominators.
	bool m_serialDenominatorState;

	//	On/off flag for serial transformers.
	bool m_serialTransformerState;

	//	On/off flag for identifier tags.
	bool m_identifierState;

	// output stream
	std::ostream &m_o;

	MemMap & m_map;

//	sqlite3 * m_db;

	QSqlDatabase m_db;
//	QSqlDatabase* _db;

	unsigned long int m_id; // store index of stored objects

	int rc;
	char const *sql;
	char *zErrMsg = 0;
	const char* data = "Callback function called";


	//	Flag for indent (intially 0)
	mutable bool m_indented;



private: //## implementation

};


#endif
