
// local includes
#include "GeoWrite/WriteGeoModelAction.h"

// C++ includes
#include <sstream>

// Qt includes
//#include <QtSql>
#include <QtDebug>


WriteGeoModelAction::WriteGeoModelAction (std::ostream &o, MemMap& m, sqlite3 *db) // TODO: remove db from signature
: m_nameTag(NULL),
  m_serialDenominator(NULL),
  m_idTag(NULL),
  m_transformState(true),
  m_volumeState(true),
  m_nametagState(true),
  m_serialDenominatorState(true),
  m_serialTransformerState(true),
  m_identifierState(true),
  m_o(o),
  m_map(m),
  //m_db(db),
  m_id(0),
  m_indented(false)
{

	qDebug() << "WriteGeoModelAction::constructor(). Start...";

//	m_db = QSqlDatabase::addDatabase("QSQLITE");
////	    m_db.setDatabaseName(path);
//	    m_db.setDatabaseName("test_Qt.db");
//
//	    if (!m_db.open())
//	    {
//	        qDebug() << "Error: connection with database fail";
//	    }
//	    else
//	    {
//	        qDebug() << "Database: connection ok";
//	    }


	//	/* Open database */
	//	rc = sqlite3_open("test.db", &m_db);
	//
	//	if( rc ){
	//		fprintf(stderr, "Can't open database: %s\n", sqlite3_errmsg(db));
	//		exit(0);
	//	}else{
	//		fprintf(stderr, "Opened database successfully\n");
	//	}
	//
	//	/* Create the database table */
	//	createTables();

	// initialize the DB
	//initDB();

	//loadTestData();

	qDebug() << "WriteGeoModelAction::constructor(). DONE.";
}


WriteGeoModelAction::~WriteGeoModelAction() {
	qDebug() << "WriteGeoModelAction::destructor().";
//	if (m_db.isOpen())
//	    {
//	        m_db.close();
//	    }
}


bool WriteGeoModelAction::isOpen() const
{
    return m_db.isOpen();
}


//## Other Operations (implementation)


void WriteGeoModelAction::handleTransform (const GeoTransform *xform)
{
	qDebug() << "WriteGeoModelAction::handleTransform(GeoTransform*)";

	m_pendingTransformList.push_back(xform);
	if (m_transformState) {
		indent();
		m_o << "TRANSFORM (" << xform << ") + ";
	}
}

void WriteGeoModelAction::handlePhysVol (const GeoPhysVol *vol)
{
	qDebug() << "WriteGeoModelAction::handlePhysVol(GeoPhysVol*)";

	const std::string name = vol->getLogVol()->getName();

	const GeoLogVol* logVol = vol->getLogVol();


	const GeoMaterial * mat = vol->getLogVol()->getMaterial();
	const std::string matName = mat->getName();

	const GeoShape * shape = vol->getLogVol()->getShape();
	const std::string shapeType = shape->type();

	unsigned int length = getPath()->getLength();

	if (m_volumeState) {
		indent();
		m_o << "VOLUME(" << vol << ":GeoPhysVol:" << vol->getLogVol()->getName() << ":" << shapeType << ":" << matName << ":" << length << ")" << std::endl;
	}
	m_pendingTransformList.erase(m_pendingTransformList.begin(),m_pendingTransformList.end());
	m_indented=false;



	//	std::ostringstream oss;
	//	oss << &vol;
	//	std::string address = oss.str();
	//
	//	// check if present in the map; if not, add it
	//	if ( ! (m_map.count(address) > 0) ) {
	//		m_map.emplace(address, 1);
	//	}


	// check if present in the map; if not, add it and then persistify it
//	if ( storeObj(vol) )
//		persistifyObj(vol);

}

void WriteGeoModelAction::handleFullPhysVol (const GeoFullPhysVol *vol)
{
	qDebug() << "WriteGeoModelAction::handleFullPhysVol(GeoFullPhysVol*)";

	if (m_volumeState) {

		const std::string name = vol->getLogVol()->getName();
		const std::string matName = vol->getLogVol()->getMaterial()->getName();
		const std::string shapeType = vol->getLogVol()->getShape()->type();
		unsigned int length = getPath()->getLength();

		indent();
		m_o << "VOLUME(" << vol << ":GeoFullPhysVol:" << name << ":" << shapeType << ":" << matName << ":" << length << ")" << std::endl;
	}
	m_pendingTransformList.erase(m_pendingTransformList.begin(),m_pendingTransformList.end());
	m_indented=false;
}

void WriteGeoModelAction::handleNameTag (const GeoNameTag *nameTag)
{
	qDebug() << "WriteGeoModelAction::handleNameTag(GeoNameTag*)";

	if (m_nametagState) {
		indent();
		m_o << "NAMETAG(" << nameTag << ":" << nameTag->getName() << ") + ";
	}
}

void WriteGeoModelAction::handleSerialDenominator (const GeoSerialDenominator *sD)
{
	qDebug() << "WriteGeoModelAction::handleSerialDenominator(GeoSerialDenominator*)";

	if (m_nametagState) {
		indent();
		m_o << "SERIAL DENOMINATOR(" << sD << ":" << sD->getBaseName() << ") + \n";
	}
	m_indented=false;
}

void WriteGeoModelAction::handleSerialTransformer (const GeoSerialTransformer  *sT)
{
	qDebug() << "WriteGeoModelAction::handleSerialTransformer(GeoSerialTransformer*)";

	if (m_volumeState) {

		const GeoXF::Function * func = sT->getFunction();

		indent();
		m_o << "SERIAL_TRANSFORMER: " << sT->getNCopies() << " PARAMETRIZED VOLUMES(" << sT << ":" << sT->getVolume()->getLogVol()->getName() << ":" << func << ")" << std::endl;
	}
	m_pendingTransformList.erase(m_pendingTransformList.begin(),m_pendingTransformList.end());
	m_indented=false;
}

void WriteGeoModelAction::handleIdentifierTag (const GeoIdentifierTag *idTag)
{
	qDebug() << "WriteGeoModelAction::handleIdentifierTag(GeoIdentifierTag*)";

	if (m_identifierState) {
		indent();
		m_o << "NAME(" << idTag << ":" << idTag->getIdentifier() << ") + ";
	}
}
//void WriteGeoModelAction::handleGeoShape (const GeoShape *shape)
//{
//	//## begin WriteGeoModelAction::handleIdentifierTag%3FB027EA0197.body preserve=yes
//	if (m_identifierState) {
//		indent();
//		m_o << "NAME(" << idTag << ":" << idTag->getIdentifier() << ") + ";
//	}
//	//## end WriteGeoModelAction::handleIdentifierTag%3FB027EA0197.body
//}

void WriteGeoModelAction::setNotification (Type type, bool state)
{
	qDebug() << "WriteGeoModelAction::setNotification()";

	std::cout << "setNotification()" << std::endl;

	if (type==TRANSFORM) {
		m_transformState=state;
	}
	else if (type==VOLUME) {
		m_volumeState=state;
	}
	else if (type==NAMETAG) {
		m_nametagState=state;
	}
	else if (type==IDENTIFIERTAG) {
		m_identifierState=state;
	}
	else if (type==IDENTIFIERTAG) {
		m_identifierState=state;
	}
}

void WriteGeoModelAction::indent ()
{
	if (!m_indented) {
		m_indented=true;
		for (size_t i=0;i<getPath()->getLength(); i++) {
			m_o << "   ";
		}
	}
}


int WriteGeoModelAction::storeObj(const GeoShape* pointer)
{
	qDebug() << "WriteGeoModelAction::storeObj(GeoShape*)";

	std::ostringstream oss;
	oss << &pointer;
	std::string address = oss.str();

	return storeAddress(address);
}

int WriteGeoModelAction::storeObj(const GeoLogVol* pointer)
{
	qDebug() << "WriteGeoModelAction::storeObj(GeoLogVol*)";

	std::ostringstream oss;
	oss << &pointer;
	std::string address = oss.str();

	return storeAddress(address);
}

int WriteGeoModelAction::storeObj(const GeoMaterial* pointer)
{
	qDebug() << "WriteGeoModelAction::storeObj(GeoMaterial*)";

	std::ostringstream oss;
	oss << &pointer;
	std::string address = oss.str();

	return storeAddress(address);
}

int WriteGeoModelAction::storeObj(const GeoGraphNode* pointer)
{
	qDebug() << "WriteGeoModelAction::storeObj(GeoGraphNode*)";

	std::ostringstream oss;
	oss << &pointer;
	std::string address = oss.str();

	return storeAddress(address);
}

int WriteGeoModelAction::storeAddress(const std::string address)
{
	qDebug() << "WriteGeoModelAction::storeAddress(): " << address.c_str();

	// check if present in the map; if not, add it
	if ( ! (m_map.count(address) > 0) ) {
		++m_id;
		m_map.emplace(address, m_id);

		return m_id; // the object has been added to the map
	}

	int objId = 0;
	//	m_map.find( address )
	//    std::unordered_map<std::string, int>::const_iterator got = m_map.find (input);
	MemMap::const_iterator got = m_map.find ( address );

	if ( got == m_map.end() ) {
		std::cout << "not found";
		return -1; // ERROR!!
	}
	else {
		std::cout << got->first << " is " << got->second;
		objId = got->second;
	}
	return objId;

}


void WriteGeoModelAction::persistifyObj(const GeoPhysVol * pointer)
{
	qDebug() << "WriteGeoModelAction::persistifyObj()";


	const std::string name = pointer->getLogVol()->getName();

	const GeoLogVol* logVol = pointer->getLogVol();

	const GeoMaterial * mat = pointer->getLogVol()->getMaterial();
	const std::string matName = mat->getName();

	const GeoShape * shape = pointer->getLogVol()->getShape();
	const std::string shapeType = shape->type();

	int matId = storeObj(mat);
	if ( matId > 0 ) {

	}


	if ( storeObj(logVol) > 0 ) {

		// CREATE RECORD

//		/* Create SQL statement: INSERT */
//		std::ostringstream os;
//		os << "INSERT INTO GEOMETRY (ID,NAME,MATERIAL,SHAPE) ";
//		os << "VALUES (" << m_id << ",'" << name << "','" << matName << "','" << shapeType << "'); ";
//
//		std::string s = os.str();
//		sql = s.c_str();
//
//		/* Execute SQL statement */
//		rc = sqlite3_exec(m_db, sql, callback, 0, &zErrMsg);
//		if( rc != SQLITE_OK ){
//			fprintf(stderr, "SQL error: %s\n", zErrMsg);
//			sqlite3_free(zErrMsg);
//		}else{
//			fprintf(stdout, "Records created successfully\n");
//		}
	}
}



// FETCH ALL RECORDS
QSqlError WriteGeoModelAction::fetchAllRecords()
{
	qDebug() << "WriteGeoModelAction::fetchAllRecords()";

//	openDB();

//	// create and open a default connection to a SQLite database
//		qDebug() << "creating the 'default' DB connection...";
//		m_db = QSqlDatabase::addDatabase("QSQLITE");
//		m_db.setDatabaseName("test_Qt.db");
//		qDebug() << "opening the DB...";
//		if (!m_db.open()) {
//			qWarning() << "DB file could be opened!";
//			return m_db.lastError();
//		}

	QSqlQuery query;
	query.exec("SELECT * FROM Material");

	while (query.next()) {
		QString name = query.value(0).toString();
		qDebug() << name;
		//		int salary = query.value(1).toInt();
		//		qDebug() << name << salary;
	}

	query = QSqlQuery("SELECT * FROM Material");
	int fieldNo = query.record().indexOf("name");
	while (query.next()) {
		//	        QString country = query.value(fieldNo).toString();
		//	        doSomething(country);
		qDebug() << query.record();
	}

//	m_db.close();

//	closeDB();

}

//// FETCH ALL RECORDS
//void WriteGeoModelAction::fetchAllRecords()
//{
//	/* Create SQL statement: FETCH */
//	sql = "SELECT * from GEOMETRY";
//
//	/* Execute SQL statement */
//	rc = sqlite3_exec(m_db, sql, callback, (void*)data, &zErrMsg);
//	if( rc != SQLITE_OK ){
//		fprintf(stderr, "SQL error: %s\n", zErrMsg);
//		sqlite3_free(zErrMsg);
//	}else{
//		fprintf(stdout, "FETCH Operation done successfully\n\n");
//	}
//}


//int WriteGeoModelAction::callback(void *NotUsed, int argc, char **argv, char **azColName){
//	int i;
//	for(i=0; i<argc; i++){
//		printf("%s = %s\n", azColName[i], argv[i] ? argv[i] : "NULL");
//	}
//	printf("\n");
//	return 0;
//}

//// CREATE TABLES
//void WriteGeoModelAction::createTables()
//{
//	/* Create SQL statements: CREATE */
//
//	// create 'LogVol' table
//	sql = "CREATE TABLE LogVol (" \
//			"ID       INTEGER PRIMARY KEY UNIQUE NOT NULL," \
//			"SHAPE            REFERENCES Shape (ID)," \
//			"MATERIAL         REFERENCES Material (ID), " \
//			"NAME     STRING  NOT NULL DEFAULT AnonLogVol " \
//			");";
//	if( executeSQL(sql) ) std::cout << "LogVol table created successfully." << std::endl;
//	else std::cout << "ERROR while creating the table LogVol" << std::endl;
//
//	// create 'PhysVol' table
//	sql = "CREATE TABLE PhysVol ("\
//			"ID     INTEGER PRIMARY KEY UNIQUE NOT NULL,"\
//			"LOGVOL INTEGER NOT NULL REFERENCES LogVol (ID),"\
//			"PARENT INTEGER REFERENCES PhysVol (ID)"\
//			");";
//	if( executeSQL(sql) ) std::cout << "PhysVol table created successfully." << std::endl;
//	else std::cout << "ERROR while creating the table PhysVol" << std::endl;
//
//	// create 'Material' table
//	sql = "CREATE TABLE Material (" \
//			"ID          PRIMARY KEY,"\
//			"NAME STRING DEFAULT Air NOT NULL"\
//			");";
//	if( executeSQL(sql) ) std::cout << "Material table created successfully." << std::endl;
//	else std::cout << "ERROR while creating the table Material" << std::endl;
//
//	// create 'Shape' table
//	sql = "CREATE TABLE Shape ("\
//			"ID    INTEGER PRIMARY KEY,"\
//			"SHAPE STRING  NOT NULL"\
//			");";
//	if( executeSQL(sql) ) std::cout << "Shape table created successfully." << std::endl;
//	else std::cout << "ERROR while creating the table Shape" << std::endl;
//
//}

//bool WriteGeoModelAction::executeSQL(const char * sql)
//{
//	/* Execute the input SQL statement */
//	rc = sqlite3_exec(m_db, sql, callback, 0, &zErrMsg);
//	if( rc != SQLITE_OK ){
//		fprintf(stderr, "SQL error: %s\n", zErrMsg);
//		sqlite3_free(zErrMsg);
//		return false;
//	}
//	//else{
//	//	fprintf(stdout, "SQL query executed successfully\n");
//	//}
//	return true;
//}


//QSqlError WriteGeoModelAction::openDB()
//{
//	qDebug() << "WriteGeoModelAction::openDB()";
//
////// create and open a default connection to a SQLite database
////	qDebug() << "creating the 'default' DB connection...";
////	m_db = QSqlDatabase::addDatabase("QSQLITE");
////	m_db.setDatabaseName("test_Qt.db");
////	qDebug() << "opening the DB...";
////	if (!m_db.open()) {
////		qWarning() << "DB file could be opened!";
////		return m_db.lastError();
////	}
//
//
////	QUuid uniqueId = QUuid::createUuid();
////	_db = new QSqlDatabase();
////	*_db = QSqlDatabase::addDatabase("QMYSQL", uniqueId.toString());
////	db->setHostName(...);
////	db->setDatabaseName(...);
////	db->setUserName(...);
////	db->setPassword(...);
//
//	_db = new QSqlDatabase();
//	*_db = QSqlDatabase::addDatabase("QSQLITE");
//	_db->setDatabaseName("test_Qt.db");
//	qDebug() << "opening the DB...";
//	if (!_db->open()) {
//		qWarning() << "DB file could be opened!";
//		return _db->lastError();
//	}
//
//}
//void WriteGeoModelAction::closeDB()
//{
//	_db->close();
//	delete _db;
////	QSqlDatabase::removeDatabase(_db->connectionName());
//	QSqlDatabase::removeDatabase("test_Qt.db");
//}




QSqlError WriteGeoModelAction::initDB()
{
	qDebug() << "WriteGeoModelAction::initDB()";

	// create and open a default connection to a SQLite database
	qDebug() << "creating the 'default' DB connection...";
	m_db = QSqlDatabase::addDatabase("QSQLITE");
	m_db.setDatabaseName("test_Qt.db");
	qDebug() << "opening the DB...";
	if (!m_db.open()) {
		qWarning() << "DB file could be opened!";
		return m_db.lastError();
	}

//	openDB();

	// check if DB is empty
	qDebug() << "checking existing tables...";
    QSqlDatabase db = QSqlDatabase::database();
	QStringList tables = db.tables();
	if (tables.contains("LogVols", Qt::CaseInsensitive)
			&& tables.contains("PhysVols", Qt::CaseInsensitive)
			&& tables.contains("Materials", Qt::CaseInsensitive)
			&& tables.contains("Shapes", Qt::CaseInsensitive)
		) {
		qDebug() << "tables are present already. Skipping tables creation.";
//		closeDB();
		return QSqlError();
	}

	// create tables
	qDebug() << "creating tables...";
	QSqlQuery q;
	if (!q.exec(QLatin1String("create table LogVols(id integer primary key, name varchar, shape integer, material integer)")))
		return q.lastError();
	if (!q.exec(QLatin1String("create table PhysVols(id integer primary key, logvol integer not null, parent integer)")))
		return q.lastError();
	if (!q.exec(QLatin1String("create table Materials(id integer primary key, name varchar)")))
		return q.lastError();
	if (!q.exec(QLatin1String("create table Shapes(id integer primary key, name varchar)")))
		return q.lastError();
	qDebug() << "DONE. Tables created successfully.";

	// load the DB with test data, for debug
//	loadTestData();

//	_db->close();
//	closeDB();

}

QSqlError WriteGeoModelAction::loadTestData()
{

	qDebug() << "WriteGeoModelAction::loadTestData()";

	// create test data
	QSqlQuery q;

	qDebug() << "Loading Shapes...";
	if (!q.prepare(QLatin1String("insert into Shapes(name) values(?)")))
		return q.lastError();
	QVariant boxId    = addShape(q, QLatin1String("Box"));
	QVariant coneId   = addShape(q, QLatin1String("Cone"));
	QVariant sphereId = addShape(q, QLatin1String("Sphere"));

	qDebug() << "Loading Materials...";
	if (!q.prepare(QLatin1String("insert into Materials(name) values(?)")))
		return q.lastError();
	QVariant airId  = addMaterial(q, QLatin1String("Air"));
	QVariant ironId = addMaterial(q, QLatin1String("Iron"));
	QVariant leadId = addMaterial(q, QLatin1String("Lead"));

	qDebug() << "Loading LogVols...";
	if (!q.prepare(QLatin1String("insert into LogVols(name, shape, material) values(?, ?, ?)")))
		return q.lastError();
	QVariant worldLogId = addLogVol(q, QLatin1String("WorldLog"), boxId, airId);
	QVariant toyLogId  = addLogVol(q, QLatin1String("ToyLog and Empire"), coneId, leadId);

	qDebug() << "Loading PhysVols...";
	if (!q.prepare(QLatin1String("insert into PhysVols(logvol, parent) values(?, ?)")))
		return q.lastError();
	QVariant rootPhysId = addPhysVol(q, worldLogId, QVariant()); // no parent
	QVariant childPhysId = addPhysVol(q, toyLogId, rootPhysId);

	qDebug() << "DONE. Created and loaded test data.";
}


QVariant WriteGeoModelAction::addPhysVol(QSqlQuery &q, const QVariant &logVolId,
             const QVariant &parentPhysVolId)
{
	qDebug() << "WriteGeoModelAction::addPhysVol()";
    q.addBindValue(logVolId);
    q.addBindValue(parentPhysVolId);
    q.exec();
    return q.lastInsertId();
}

QVariant WriteGeoModelAction::addLogVol(QSqlQuery &q, const QString &name, const QVariant &shapeId,
             const QVariant &materialId)
{
	qDebug() << "WriteGeoModelAction::addLogVol()";
    q.addBindValue(name);
    q.addBindValue(shapeId);
    q.addBindValue(materialId);
    q.exec();
    return q.lastInsertId();
}

QVariant WriteGeoModelAction::addMaterial(QSqlQuery &q, const QString &name)
{
	qDebug() << "WriteGeoModelAction::addMaterial()";
    q.addBindValue(name);
    q.exec();
    return q.lastInsertId();
}

QVariant WriteGeoModelAction::addShape(QSqlQuery &q, const QString &name)
{
	qDebug() << "WriteGeoModelAction::addShape()";
    q.addBindValue(name);
    q.exec();
    return q.lastInsertId();
}
